# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

# include-test-real-service

parameters:
- name: poolBuild
  type: object
  default: Small

- name: testPackage
  type: string
  default: "@fluid-private/test-end-to-end-tests"

- name: testWorkspace
  type: string

- name: timeoutInMinutes
  type: number
  default: 60

- name: env
  type: object
  default:

- name: splitTestVariants
  type: object
  default:
  - name: ""
    flags: ""

- name: testCommand
  type: string

- name: continueOnError
  type: boolean
  default: false

- name: testFileTarName
  type: string
  default: null

# Id of the pipeline run that contains the artifacts to download.
# Needed to workaround a bug in the DownloadPipelineArtifact task that might cause artifacts to be downloaded from the
# incorrect pipeline run (see https://github.com/microsoft/azure-pipelines-tasks/issues/13518).
- name: artifactBuildId
  type: string

# Name of the Secure File that contains the self-signed cert for the R11s deployment.
# If not blank, the pipeline will try to install it to the local cert store.
- name: r11sSelfSignedCertSecureFile
  type: string
  default: ""

- name: condition
  type: string
  default: true

- name: loggerPackage
  type: string
  default: '@ff-internal/aria-logger'

# If true, skip publishing report files for test results.
# Useful because our stress tests pipeline doesn't generate any test result files.
- name: skipTestResultPublishing
  type: boolean
  default: false

# Custom steps specified by the "caller" of this template, for any additional things that need to be done
# after the steps in this template complete.
- name: additionalSteps
  type: stepList
  default: []

jobs:
  - ${{ each variant in parameters.splitTestVariants }}:
    - job:
      displayName: Run ${{ variant.name }}
      pool: ${{ parameters.poolBuild }}
      condition: ${{ parameters.condition }}
      timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
      variables:
      - group: ado-feeds
      - name: isTestBranch
        value: ${{ startsWith(variables['Build.SourceBranch'], 'refs/heads/test/') }}
        readonly: true
      # We use 'chalk' to colorize output, which auto-detects color support in the
      # running terminal.  The log output shown in Azure DevOps job runs only has
      # basic ANSI color support though, so force that in the pipeline
      - name: FORCE_COLOR
        value: 1
      - name: testPackageDir
        value: '${{ parameters.testWorkspace }}/node_modules/${{ parameters.testPackage }}'
      - name: testPackageFilePattern
        value: ${{ replace(replace(parameters.testPackage, '@', '' ), '/', '-') }}-[0-9]*.tgz
      - name: testPackagePathPattern
        value: $(Pipeline.Workspace)/client/pack/scoped/${{ variables.testPackageFilePattern }}
      - name: skipComponentGovernanceDetection
        value: true
      - name: artifactPipeline
        value: Build - client packages
      - name: feed
        ${{ if eq(variables.isTestBranch, 'true') }}:
          value: $(ado-feeds-internal) # Comes from the ado-feeds variable group
        ${{ else }}:
          value: $(ado-feeds-build) # Comes from the ado-feeds variable group
      - name: devFeed
        ${{ if eq(variables.isTestBranch, 'true') }}:
          value: $(ado-feeds-internal) # Comes from the ado-feeds variable group
        ${{ else }}:
          value: $(ado-feeds-dev) # Comes from the ado-feeds variable group

      steps:
      # Setup
      - checkout: none
        clean: true

      # Install self-signed cert for R11s deployment in local cert store
      - ${{ if ne(parameters.r11sSelfSignedCertSecureFile, '') }}:
        - task: DownloadSecureFile@1
          displayName: 'Download r11s self-signed cert'
          name: downloadCertTask
          inputs:
            secureFile: ${{ parameters.r11sSelfSignedCertSecureFile }}
            retryCount: '2'

        - task: Bash@3
          displayName: 'Install r11s self-signed cert in local cert store'
          inputs:
            targetType: 'inline'
            script: |

              curl https://alfred.r11s-wu2.prague.office-int.com/documents/fluid

              # Extract public part from cert
              openssl x509 -in $(downloadCertTask.secureFilePath) -out cert.crt
              # Install cert
              sudo cp cert.crt /usr/local/share/ca-certificates/
              sudo update-ca-certificates

              curl https://alfred.r11s-wu2.prague.office-int.com/documents/fluid

      # Print parameters/Vars
      # Variables declared outside this template will only work with "macro syntax": $(name).
      # Variables declared inside this template also work with "template expression syntax": ${{ variables.name }}.
      - task: Bash@3
        displayName: Print Parameters and Variables
        inputs:
          targetType: 'inline'
          script: |
            # Show all task group conditions

            echo "
            Pipeline Parameters:
              poolBuild=${{ parameters.poolBuild }}
              testPackage=${{ parameters.testPackage }}
              r11sSelfSignedCertSecureFile=${{ parameters.r11sSelfSignedCertSecureFile }}

            Pipeline Variables:
              isTestBranch=${{ variables.isTestBranch }}
              testWorkspace=${{ parameters.testWorkspace }}
              testPackageFilePattern=${{ variables.testPackageFilePattern }}
              feed=${{ variables.feed }}
              devFeed=${{ variables.devFeed }}
              testCommand=${{ parameters.testCommand }}
              continueOnError=${{ parameters.continueOnError }}
              variant.flag=${{ variant.flags }}
              testFileTarName=${{ parameters.testFileTarName }}
              artifactPipeline=${{ variables.artifactPipeline }}
              artifactBuildId=${{ parameters.artifactBuildId }}
            "
