# Copyright (c) Microsoft Corporation and contributors. All rights reserved.
# Licensed under the MIT License.

parameters:
- name: buildDirectory
  type: string

- name: buildToolsVersionToInstall
  type: string
  default: repo

# The path to the pnpm store.
- name: pnpmStorePath
  type: string
  default: $(Pipeline.Workspace)/.pnpm-store

jobs:
  - job:
    displayName: Upload Dev Manifest
    variables:
    - group: storage-vars
    steps:
    # These steps should ONLY run if we're using the repo version of the build tools. These steps are mutually exclusive
    # with the next group of steps.
    - ${{ if eq(parameters.buildToolsVersionToInstall, 'repo') }}:
      - template: include-install-pnpm.yml
        parameters:
          buildDirectory: $(Build.SourcesDirectory)/build-tools
          pnpmStorePath: ${{ parameters.pnpmStorePath }}
          enableCache: false

      - task: Bash@3
        name: InstallBuildTools
        displayName: Install Fluid Build Tools (from repo)
        inputs:
          targetType: 'inline'
          workingDirectory: $(Build.SourcesDirectory)/build-tools
          script: |
            pnpm i --frozen-lockfile
            pnpm build:compile
            cd packages/build-cli
            # Use npm link instead of pnpm link because it handles bins better
            npm link
            echo "which flub: $(which flub)"

    # These steps install a version of build-tools from the npm registry. As noted above, these steps are mutually exclusive
    # with the previous group of steps.
    - ${{ if ne(parameters.buildToolsVersionToInstall, 'repo') }}:
      - task: Bash@3
        name: InstallBuildTools
        displayName: Install Fluid Build Tools (from npm)
        inputs:
          targetType: 'inline'
          workingDirectory: ${{ parameters.buildDirectory }}
          script: |
            echo "${{ parameters.buildToolsVersionToInstall }}"
            npm install --global "@fluid-tools/build-cli@${{ parameters.buildToolsVersionToInstall }}"

    - task: Bash@3
      name: BuildToolsInstallCheck
      displayName: Check Build Tools Installation
      inputs:
        targetType: 'inline'
        workingDirectory: ${{ parameters.buildDirectory }}
        script: |
          # Output the help and full command list for debugging purposes
          echo "which flub: $(which flub)"
          flub --help
          flub commands

    - task: Bash@3
      displayName: Generate release reports
      inputs:
        targetType: 'inline'
        workingDirectory: ${{ parameters.buildDirectory }}
        script: |
          mkdir generate_release_reports
          flub release report -g client -o generate_release_reports --baseFileName manifest

    - task: Bash@3
      displayName: Update release report version
      inputs:
        targetType: 'inline'
        workingDirectory: ${{ parameters.buildDirectory }}
        script: |
          mkdir upload_release_reports
          flub release report-unreleased --version $(SetVersion.version) --fullReportFilePath generate_release_reports/manifest.full.json --outDir upload_release_reports --branchName '$(Build.SourceBranch)'

    - task: CopyFiles@2
      displayName: Copy release reports
      inputs:
        SourceFolder: ${{ parameters.buildDirectory }}/upload_release_reports
        TargetFolder: $(Build.ArtifactStagingDirectory)/release_reports

    - task: AzureCLI@2
      displayName: Upload release reports
      continueOnError: true
      inputs:
        azureSubscription: 'fluid-docs'
        scriptType: bash
        workingDirectory: ${{ parameters.buildDirectory }}
        scriptLocation: inlineScript
        inlineScript: |
          for file in upload_release_reports/*; do
              az storage blob upload -f "$file" -c 'manifest-files' -n "$(basename "$file")" --account-name $(STORAGE_ACCOUNT) --account-key $(STORAGE_KEY) --overwrite true --verbose
          done
          # Delete generate_release_reports and upload_release_reports folder
          rm -r generate_release_reports upload_release_reports
